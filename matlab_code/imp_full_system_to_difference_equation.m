close all
clear all

% sample_time = 0.1;
sample_time = 0.013;
freq1 = 4.0;
opt = c2dOptions('Method', 'tustin', 'PrewarpFrequency', freq1);
s = tf('s');

% generated by analyzing root locus output plot from simulink model
C_w1 = s + 0.1 + 2*pi * freq1 * 1i;
C = (C_w1) * conj(C_w1) / (s^2 + (2*pi * freq1)^2);

plant = (s^2 + s + 1) / (s^3 + s^2 + s + 1);
imp_system = feedback(plant * C, 1);
disp('feedback system created')

imp_discrete = c2d(imp_system, sample_time, opt)
% imp_discrete = c2d(imp_system, sample_time);
disp('discrete computed')

[num, den] = tfdata(imp_discrete);
F = num{:}  % numerator of imp_discrete
B = den{:}  % denominator of imp_discrete
% A = [1];
%
% M = idpoly(A, {B, F}, 'NoiseVariance', sample_time);
% [poly_a, poly_b, poly_c, poly_d, poly_e] = polydata(M);

final_time = 10;
% X = ones(1, round(final_time / sample_time));
sim_time = linspace(0, final_time, 1000);
input_signal = 0.02 * sin(freq1 * sim_time) + 2.0;

sim_Y = lsim(imp_system, input_signal, sim_time);
disp('step response computed')
[diff_output, Zf] = filter(F, B, input_signal); % runs the difference equation, A & B are the controller in discrete time domain, X is the input function
disp('difference equation run')


hold on
figure(1)
plot(sim_time, diff_output, 'LineWidth', 2)
plot(sim_time, sim_Y, 'LineWidth', 4)
plot(sim_time, input_signal, 'LineWidth', 2)
legend('difference', 'continuous', 'input')
